# Generated by Django 5.0.7 on 2024-07-23 15:07

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PluginChoices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('username', models.CharField(max_length=128)),
                ('profile_type', models.CharField(blank=True, choices=[('user', 'user'), ('developer', 'developer')], max_length=20, null=True)),
                ('about', models.TextField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ModelInference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Details of your AI Model and its capabilities')),
                ('category', models.CharField(choices=[('Medical', 'Medical'), ('Finance', 'Finance'), ('Image', 'Image')], max_length=20, verbose_name='Which category does this AI model belong to?')),
                ('status', models.CharField(choices=[('Development', 'Development'), ('Staging', 'Staging'), ('Production', 'Production')], max_length=20, verbose_name='Current Development Status')),
                ('inference_endpoint', models.CharField(blank=True, max_length=512, null=True, verbose_name='Provide inference endpoint at Theta EdgeCloud')),
                ('release_as_web_app', models.BooleanField(default=False, verbose_name='Do you want to release it as readymade web app?')),
                ('web_app_access_url', models.CharField(blank=True, max_length=512, null=True, verbose_name='Web App Access')),
                ('web_app_price_per_use', models.FloatField(verbose_name='Cost of plugin per call')),
                ('release_as_binary', models.BooleanField(default=False, verbose_name='Do you want to release it as binary image that users can deploy themselves?')),
                ('binary_image', models.CharField(blank=True, max_length=512, null=True, verbose_name='Access URL or Repository of Binary Image')),
                ('binary_image_price', models.FloatField(verbose_name='One-time cost of binary image')),
                ('release_as_plugin', models.BooleanField(default=False, verbose_name='Do you want to release it as different plugins?')),
                ('plugin_price_per_use', models.FloatField(verbose_name='Cost of plugin per call')),
                ('release_as_api', models.BooleanField(default=False, verbose_name='Do you want to release it as REST API?')),
                ('api_price_per_use', models.FloatField(verbose_name='Cost of API per call')),
                ('terms', models.TextField(verbose_name='Terms & Conditions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('list_of_plugins', models.ManyToManyField(to='inference_portal.pluginchoices', verbose_name='Which plateforms you want to distribute to?')),
            ],
        ),
        migrations.CreateModel(
            name='ModelInferencePlugin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('model_inference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inference_portal.modelinference')),
            ],
        ),
        migrations.CreateModel(
            name='OrderTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('payment_type', models.CharField(choices=[('TFUEL', 'TFUEL'), ('USD', 'USD')], max_length=20)),
                ('service_name', models.CharField(max_length=32, verbose_name='Service Name')),
                ('service_type', models.CharField(max_length=32, verbose_name='Service Type')),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer', to=settings.AUTH_USER_MODEL)),
                ('model_inference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inference_portal.modelinference')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(verbose_name='My Notes')),
                ('tfuel_address', models.CharField(blank=True, max_length=512, null=True, verbose_name='TFUEL Address')),
                ('tfuel_balance', models.FloatField(default=0)),
                ('bank_id', models.CharField(blank=True, max_length=512, null=True, verbose_name='Bank ID')),
                ('bank_balance', models.FloatField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RESTAPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_endpoint', models.CharField(max_length=512, verbose_name='API Endpoint')),
                ('api_key', models.CharField(max_length=512, verbose_name='API Key')),
                ('api_secret', models.CharField(max_length=512, verbose_name='API Secret')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Blocked', 'Blocked')], max_length=20)),
                ('description', models.TextField()),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inference_portal.ordertransaction')),
            ],
        ),
    ]
